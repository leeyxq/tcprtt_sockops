// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tcprttSkInfo struct {
	SkKey  tcprttSkKey
	SkType uint8
	_      [3]byte
}

type tcprttSkKey struct {
	LocalIp4   uint32
	RemoteIp4  uint32
	LocalPort  uint32
	RemotePort uint32
}

// loadTcprtt returns the embedded CollectionSpec for tcprtt.
func loadTcprtt() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcprttBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcprtt: %w", err)
	}

	return spec, err
}

// loadTcprttObjects loads tcprtt and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcprttObjects
//	*tcprttPrograms
//	*tcprttMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcprttObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcprtt()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcprttSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcprttSpecs struct {
	tcprttProgramSpecs
	tcprttMapSpecs
}

// tcprttSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcprttProgramSpecs struct {
	BpfSockopsCb *ebpf.ProgramSpec `ebpf:"bpf_sockops_cb"`
}

// tcprttMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcprttMapSpecs struct {
	MapEstabSk *ebpf.MapSpec `ebpf:"map_estab_sk"`
	RttEvents  *ebpf.MapSpec `ebpf:"rtt_events"`
}

// tcprttObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcprttObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcprttObjects struct {
	tcprttPrograms
	tcprttMaps
}

func (o *tcprttObjects) Close() error {
	return _TcprttClose(
		&o.tcprttPrograms,
		&o.tcprttMaps,
	)
}

// tcprttMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcprttObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcprttMaps struct {
	MapEstabSk *ebpf.Map `ebpf:"map_estab_sk"`
	RttEvents  *ebpf.Map `ebpf:"rtt_events"`
}

func (m *tcprttMaps) Close() error {
	return _TcprttClose(
		m.MapEstabSk,
		m.RttEvents,
	)
}

// tcprttPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcprttObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcprttPrograms struct {
	BpfSockopsCb *ebpf.Program `ebpf:"bpf_sockops_cb"`
}

func (p *tcprttPrograms) Close() error {
	return _TcprttClose(
		p.BpfSockopsCb,
	)
}

func _TcprttClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcprtt_bpfeb.o
var _TcprttBytes []byte
